// Классы

// Классы в TypeScript создается также как и ES6 классы но есть определенные нюансы

class TypeScript {
   version: string //указываем поля которые будут в этом классе

   constructor(version: string) {
      this.version = version
   }

   info(name: string) {
      return `[${name}]: TypeScript version is ${this.version}`
   }
}

// Рассматриваем отличие создание классов от JavaScript

//class Car {
//   readonly model: string // Мы можем указывать поля с мофификатором readonly - который позволяет нам на этапе компиляции определить что данные переменнные не будут перезаписываться никак
//   readonly numberofWheels: number = 4
// Хорощей практикой считается если  мы определяем поля до конструктора 
//   constructor(theModel: string) {
// Что интересно  учитывая что поле model  у нас readonly мы всеравно можем его перезаписать, но можем это сделатьтолько внутри конструктора  в доугих методах мы этого сдеалть не можем 
//      this.model = theModel
//}
//}

// Более короткая версия верхней записи и они идентичны
class Car {
   readonly numberofWheels: number = 4
   constructor(readonly model: string) { }
}

// =====================

// Модификаторы для классов
// Что такое модификаторы бывает три вида модификаторов protected public private
// Если мы не пишем никакого  мофдификатора то по умолчанию они будут все public
class Animal {
   protected voice: string = '' //защищенные 
   public color: string = 'black' // Публичные переменнные

   private go() {
      console.log('Go')
   }
}

// Создаем уже более точеый класс который наследуется от Animal

class Cat extends Animal {
   public setVoice(voice: string): void {
      this.voice = voice
   }
}
const cat = new Cat()

// Принцип работы модификаторов

// Когда мы задаем модификатор protected это озночает что данные поля они могут быть доступны в классе  Animal и для всех классов которые наследуются от класса Animal тоесть видно что  учитывая что это protected свойство мы всеравно в  классе Cat имеем к ниму доступ  и можем спокойну ему задавать что то

// private переменнные или методы они достк=упны только в том классе в котором были определены тоесть в Animal  мы можем спокоцно пользоваться методом go и все будет хорошо  однако в классе cat мы уже не можем обратится к методу go потому что он доступен только в классе Animal

// public перменные и методы которые доступны лоя всх instanse они доступны для перменной cat  класса Cat в общем везде 
//==========

// Абстрактные классы  и для чего они нужны ?
// Они не во что не компилируются но они также нам нужны на этапе разработки для того чтобы от них наследоваться и помимо этого еще и присутствуют абстрактные методы

// Пример 
abstract class Component {
   //Здесь мы просто описываем какие то методы которые должны быть реализованы у классов которые будут наследоваться от этого компонета и они так же будут являться абстрактными 
   abstract render(): void
   abstract info(): string
}

class AppComponent extends Component {
   render(): void {
      console.log('Component on render')
   }
   info(): string {
      return 'This is info '
   }
}

// Абстрактыне классы от них можно наследоваться но при этом они не во что не компилируются