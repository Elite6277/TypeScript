// Что такое интерфейсы и зачем они нужны 
// По сути мы создаем некоторый тип который в основном служит для объектов или для классов где мы указываем какие поля какие функции и какие вообще элементы должны присутствовать у этих объектов 
// И опять же интерфейсы они не во что не компилируются они также нам нужны толко на этапе разработки 

// Для того чтобы завести интерфейс пишем ключевое слово интерфейс

interface Rect {
   readonly id: string // что классно в интерфейсах мы сразу же можем сказать что данное поле у нас будет только для чтения и мы не можем его изменять  и для этого мы можем применть модификатор readonly
   color?: string //  еще я могу добавлять эти параметры как необязательные  путем лобавления знака вопрос ?
   size: {
      width: number
      height: number
   }
}

// Теперь мы можем создавать различные объекты которые будут являться типом React

const rect1: Rect = {
   id: '1234',
   size: {
      width: 20,
      height: 30
   },
   color: '#ccc'
}

const rect2: Rect = {
   id: '12345',
   size: {
      width: 10,
      height: 5
   }
}

rect2.color = 'black'
// Если мы захотим поменять значение у id у нас ничего не получится потому что у него стоит readonly property
//rect.id = '32132 
// Вас единственнное что может смутить то что здесь rect2 это константа но в последствии я ее изменяю потому что в конечном итоге мы всеравно еще работает в JavaScript,
// И в JavaScript те вещи которые являются const  если это объект или если это массив то мы можем изменять их внутренне состояние но мы не можем им передавать другое значение 

// Мы можем указывать к какому типу относится объект 
const rect3 = {} as Rect
// Есть альтернативная старая запись 

// Здесь указываем к какому типу нужно привести его, кем его стоит считать 

//==================================

// Наследования интерфейсов 
// Тоесть TypeScript нам позволяет очень гибко взаимодействовать с интерфейсами 

// Мы можем наследоваться 
// создаем новый интерфейс и ланный интерфейс будет у нас наследоваться от интерфейса Rect 
interface RectWithArea extends Rect {
   getArea: () => number
}

const rect5: RectWithArea = {
   id: '123',
   size: {
      width: 20,
      height: 20
   },
   getArea(): number {
      return this.size.width * this.size.height
   }
}

//  =============

// Также интерфейсы могут взаимодействовать с классами 

// Очень часто интерфейсы называет через большую букву I = что говорит что это у нас интерфейс
interface IClock {
   time: Date
   setTime(date: Date): void
}

//  Для того чтобы TypeScript понял что данный класс он имплементируется от интерйса и должен реализовать его методы мы так и пишем implements IClock 
class Clock implements IClock {
   time: Date = new Date()

   setTime(date: Date): void {
      this.time = date
   }
}

// =============

// Бывают ситуации когда нам необходимо создать интерфейс для объекта у которого  будет большое кол-во динамических ключей 

interface Styles {
   [key: string]: string
   // Этот  код [key: string] относится  к border, marginTop, borderRadius
   // А тот что после скобок :string относится уже к '1px solid black', '2px'
}

const css: Styles = {
   border: '1px solid black',
   marginTop: '2px',
   borderRadius: '5px',
}