//  TypeScript

// Что такое TypeScript зачем он нужен и когда его следует импользовать

// TypeScript это статический типизируемый JavaScript который в основоном служит для создания сложных и больших приложений
// Также у него есть кодовое название JavaScript который маштабируется JavaScipt that scales

// Зачем вообще нужен TypeScript и в каких случаях его следует использовать

// Здесь нужно окунуться в историю за последние годы JavaScript он существенно эволюционировал теперь это  непрсото обычный сриптовый язык а теперь это полноценный  язык программирования который служит для создания клиентских приложений, для серверных приложений, мобильных прилодений  тоесть он используется повсеместно.
// Но JavaScript когда он создавался он не был  предназначен для больших и сложных приложений  в нем изначально была заложена динамическая типизация это озночает что любой переменной любого типа вы могли присвоить другой тип скажем у вас была переменная строкового формата и вы могли присвоить ей например массив.

// Если язык поддерживает статическую типизацию то это озночает что вообще качество кода увеличивается,  увеличивается понимание этого кода , данный код проще поддерживать и на этапе разработки мы можете отлавливать большое кол-во ошибок.
// Однако без статической системы очень сложно построить какие то сложные приложения с большим кол-вом взаимодействий и вообще работать например в больших командах, поэтому Microsoft и разработала  язык TypeScript который по сути нам нужен только на этапе разработки, тоесть он берет ядро JavaScript  и поверх него накладывет какие то новые абстракции которые мы рассмотрим, и они позволяют нам на этапе разработки отлавливать большое кол-во проблем  писать более структурированный и красивый код  и тд.

// Какие есть плюсы у TypeScript

// TypeScript может отлавливать ошибки на этапе их разработки, и когда вы пишите код вы уже сразу можете понять что ок здесь вы сделали что то не так здесь не хватает каких то данных, и поэтому можете это сразу поправить не собирая приложение и не отлавливая эту ошибку в браузере

// TypeScript позволяет писать более сложные приложения и делать это более комфортно.

// Рефакторить код тоже становиться проще потому что у вас есть типы и соответственно вы сразу можете понять где что то может пойти не так

// Намного проще работать в командах разработчику потому что у каждого разработчика есть свой собственный стиль написания кода, но когда есть статическая типизация то становиться проще

// Это очень богатая документация которую мы можем найти на сайте здесь есть большое кол-во туториалов,описание функциональностей и тд
// ------------------------------------------------------------------------------------------------------------------------
// В чем минусы TypeScript
//  Один минус это то что это лишняя дополнительная прослойка которая вам необходимо внедрить на этапе разработки  но зачястую она себя окупает

// Рассмотрим баозовые возможности TypeScript

// В первую очередь нам нужно установить TypeScript глобально на компьютере посмтори в документации
// Чтобы вывести typeScript  в обычный JSфайл  мне необходимо обратится к TypeScript
// в терминале пишем tsc и название файла без ковычек в нашем примере это выглядит так tsc .\types.ts и он автоматически скомпилирует TypeScript в JS файл с одноименным названием, и дальше мы можем запустить скомпилированный js файл с помошью node.js пишем node ./types.js

//const str: string = 'Hello';

//console.log(str);

// Начнем рассматривать базовые типы которые есть в TypeScript и которые мы можем создавать

// Типы мы указываем перед присвоением и через двоеточие  после двоеточия : идет указание типа
const isFetching: boolean = true;
const isLoadind: boolean = false;

// Примитивный тип чило  ти чила указывается через ключевое слово number
// Что интересно что теперь даже если я сделаю  переменную int через ключевое слово let, и поробую ее переопределить на строку то мы сразу  получим ошибку
let int: number = 42;
//int = ''
// Дробные значения float
const float: number = 4.2;

const num: number = 3e10; //выведится 30000000000
console.log(num);

// string строка
const message: string = 'Hello TypeScript';

// Далее у нас идут массивы 
// Массивы это некоторая структура данных который содержит в себе другие данные 
// И как нам указать в TS что массив состоит из чисел number[] или например  из строк string[]

const numberArray: number[] = [1, 1, 2, 3, 5, 8, 13]
//Однако у массива есть еще другая форма указания типа  Array<number> такая запись наз-ся generic типы по сути она указывает в скобка из чего состоит данный class или данный объект
const numberArray2: Array<number> = [1, 1, 2, 3, 5, 8, 13]

// Пример generic со строкой

const words: string[] = ['Hello', 'TypeScript'];

// Однако в TypeScript сущ 1 интересный тип данных который наз-ся Tuple
//Tuple- Его идея заключается  в том  что мы также создаем массив состоящий из разных типов данных 
const contact: [string, number] = ['Vladilen', 1234567];

//Во время разработки возникают такие ситуации что нам все же необходимо переопределить тип данных  для этого сущ специальный тип Any

// any 
// Теперь мы можем к этой переменной присвоиьт любое значение 
let variable: any = 42;

variable = 'New String';
variable = [];

// ====
// Мы можем сразу передавать тип аргумента в аргументах
function sayMyName(name: string): void { // void озночает что функция ничего нам не вернет
   console.log(name)
}

sayMyName('Хайзенберг')

// Есть еще один интересный тип в TypeScript который был анонсирован относительно в новых версиях его который наз-ся never

// Never
// Его  нам стоит указывать в двух случаях 
// 1 когда функция либо возвращает нам ошибку и никогда не заканчивает свое выполнение 
// 2 либо когда она постоянно что то делает
function throwError(message: string): never {
   throw new Error(message)
}

function infinite(): never {
   while (true) {// Бесконечный цикл 

   }
}

// Type
// Специальная кострукция в TypeScript которая позволяет нам создвать свои собственнные типы 
// Например мы можем использовать примитивные типы и использовать для них aliace
// Я могу создать type login  и у него будет значение string
// Теперь данный тип я могу указывать для каких либо переменных

type Login = string
const login: Login = 'admin'

// Но я не могу например создать login2 :Login со значением 2 потому что в действительности у нас логин является просто строкой и в данном случае мы просто создаем aliace 
// Порой это бывает удобно для разработки потому что какие то  именованные типы  дают больше понимание того что происходит 

// Так же мы можем указывать потенциально различные типы данных для одной и то же переменной с помоштю type

// Встречаются такие ситуации когда ID может быть либо строкой либо числом 
// Поэтому я могу создать тип ID  который будет принимать в себя значения либо string либо numner 

type ID = string | number // Такие вещи когда мы компилируем их в JavaScript они просто исчезают они нам также нужны только на этапе разработки 
const id1: ID = 1234
const id2: ID = '1234'
// Мы не можем создать boolean потому что id принимает либо строку либо число 
//const id3: ID = true

// Последние два примитвных типа  Null и undefined
// Они не очень часто используются в основном они используются для определения типов 

type SomeType = string | null | undefined




